from __future__ import division
import md5, urllib
from sets import Set
from StringIO import StringIO
from twisted.application import internet, service
from nevow import appserver
from nevow import loaders, rend, static, tags as T
import Image

from rdflib import Namespace, RDFS
from rdflib.sparql.sparqlGraph import SPARQLGraph as Graph
from rdflib.sparql import GraphPattern
from rdflib.sparql.sparqlOperators import getLiteralValue

PR = Namespace("http://bigasterisk.com/2006/02/picreferer#")
DC = Namespace("http://http://purl.org/dc/elements/1.1/")

graph = Graph()
print "reading db"
graph.parse("data.rdf", format="nt")
print "done"

def thumb(cksum, localURL):
    print "resizing", localURL
    try:
        f = open("thumb/%s" % cksum)
    except IOError:
        pass
    else:
        return f.read()
    
    fullimg = StringIO(urllib.urlopen(localURL).read())
    img = Image.open(fullimg)
    img.thumbnail((100,100))
    jpg = StringIO()
    jpg.name = localURL
    img.save(jpg)
    open("thumb/%s" % cksum, "w").write(jpg.getvalue())
    return jpg.getvalue()

_dr = {}
def hitSummary(remotePage, localFile):
    """totalBytes, hitCount, earliestDate, latestDate"""
    key = (remotePage, localFile)
    if key not in _dr:
        bytes = 0
        hitCount = 0
        dates = []
        for by,date in graph.query(("?bytes", "?date"),
                GraphPattern([("?hit", PR['remotePage'], remotePage),
                              ("?hit", PR['localFile'], localFile),
                              ("?hit", DC['date'], "?date"),
                              ("?hit", PR['bytes'], "?bytes")])):
            dates.append(date)
            bytes += getLiteralValue(by)
            hitCount += 1
        dates.sort()

        _dr[key] = (bytes, hitCount, dates[0], dates[-1])
    return _dr[key]

class Main(rend.Page):
    docFactory = loaders.xmlfile("main.html")
    def __init__(self):
        self.thumb = {} # urlmd5 : small jpeg
        self.urlmd5 = {} # urlmd5 : local uri

        for local in graph.objects(None, PR['localFile']):
            self.urlmd5[md5.md5(local).hexdigest()] = local
        
    def data_pages(self, ctx, data):
        for page in graph.subjects(PR['requests'], None):
            locals = list(graph.objects(page, PR['requests']))
            yield (page,
                   [(local, md5.md5(local).hexdigest(), local)
                    for local in locals])

    def data_images(self, ctx, data):
        locals = Set(graph.objects(None, PR['localFile']))
        for local in locals:
            myspWords = []
            myspacers = graph.query("?remote",
                         GraphPattern([("?hit", PR['localFile'], local),
                                       ("?hit", PR['remotePage'], "?remote")]))
            for mysp in myspacers:
                bytes, hitCount, start, end = hitSummary(mysp, local)
                desc = ("%s hits (%.1f megabytes) from %s to %s" %
                        (hitCount, bytes / (1<<20), start, end))
                myspWords.append((mysp, desc))
                    
            yield ((local, md5.md5(local).hexdigest(), str(local)[:100]),
                   myspWords)

    def render_referer(self, ctx, data):
        ctx.fillSlots("url", data)
        ctx.fillSlots("label", graph.value(data, RDFS.label))
        return ctx.tag

    def locateChild(self, ctx, segments):
        if segments[0] == 'thumb':
            if segments[1] not in self.thumb:
                try:
                    self.thumb[segments[1]] = thumb(segments[1],
                                                    self.urlmd5[segments[1]])
                except (IOError, KeyError, ZeroDivisionError):
                    self.thumb[segments[1]] = ""
            data = self.thumb[segments[1]]
            return static.Data(data, "image/jpeg"), ()
        else:
            return rend.Page.locateChild(self, ctx, segments)



application = service.Application('picreferer')
webServer = internet.TCPServer(8083, appserver.NevowSite(Main()))
webServer.setServiceParent(application)
